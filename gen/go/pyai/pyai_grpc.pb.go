// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.23.4
// source: pyai/pyai.proto

package pyaiv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DiarizationServiceClient is the client API for DiarizationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DiarizationServiceClient interface {
	GetSpeackerTimestamps(ctx context.Context, in *SpeackerTimestampsRequest, opts ...grpc.CallOption) (*SpeackerTimestampsRespones, error)
}

type diarizationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDiarizationServiceClient(cc grpc.ClientConnInterface) DiarizationServiceClient {
	return &diarizationServiceClient{cc}
}

func (c *diarizationServiceClient) GetSpeackerTimestamps(ctx context.Context, in *SpeackerTimestampsRequest, opts ...grpc.CallOption) (*SpeackerTimestampsRespones, error) {
	out := new(SpeackerTimestampsRespones)
	err := c.cc.Invoke(ctx, "/pyai.DiarizationService/GetSpeackerTimestamps", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DiarizationServiceServer is the server API for DiarizationService service.
// All implementations must embed UnimplementedDiarizationServiceServer
// for forward compatibility
type DiarizationServiceServer interface {
	GetSpeackerTimestamps(context.Context, *SpeackerTimestampsRequest) (*SpeackerTimestampsRespones, error)
	mustEmbedUnimplementedDiarizationServiceServer()
}

// UnimplementedDiarizationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDiarizationServiceServer struct {
}

func (UnimplementedDiarizationServiceServer) GetSpeackerTimestamps(context.Context, *SpeackerTimestampsRequest) (*SpeackerTimestampsRespones, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSpeackerTimestamps not implemented")
}
func (UnimplementedDiarizationServiceServer) mustEmbedUnimplementedDiarizationServiceServer() {}

// UnsafeDiarizationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DiarizationServiceServer will
// result in compilation errors.
type UnsafeDiarizationServiceServer interface {
	mustEmbedUnimplementedDiarizationServiceServer()
}

func RegisterDiarizationServiceServer(s grpc.ServiceRegistrar, srv DiarizationServiceServer) {
	s.RegisterService(&DiarizationService_ServiceDesc, srv)
}

func _DiarizationService_GetSpeackerTimestamps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SpeackerTimestampsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiarizationServiceServer).GetSpeackerTimestamps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pyai.DiarizationService/GetSpeackerTimestamps",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiarizationServiceServer).GetSpeackerTimestamps(ctx, req.(*SpeackerTimestampsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DiarizationService_ServiceDesc is the grpc.ServiceDesc for DiarizationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DiarizationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pyai.DiarizationService",
	HandlerType: (*DiarizationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSpeackerTimestamps",
			Handler:    _DiarizationService_GetSpeackerTimestamps_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pyai/pyai.proto",
}

// TranscribationServiceClient is the client API for TranscribationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TranscribationServiceClient interface {
	ConvertSpeachToText(ctx context.Context, in *ConvertSpeachToTextRequest, opts ...grpc.CallOption) (*ConvertSpeachToTextRespones, error)
}

type transcribationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTranscribationServiceClient(cc grpc.ClientConnInterface) TranscribationServiceClient {
	return &transcribationServiceClient{cc}
}

func (c *transcribationServiceClient) ConvertSpeachToText(ctx context.Context, in *ConvertSpeachToTextRequest, opts ...grpc.CallOption) (*ConvertSpeachToTextRespones, error) {
	out := new(ConvertSpeachToTextRespones)
	err := c.cc.Invoke(ctx, "/pyai.TranscribationService/ConvertSpeachToText", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TranscribationServiceServer is the server API for TranscribationService service.
// All implementations must embed UnimplementedTranscribationServiceServer
// for forward compatibility
type TranscribationServiceServer interface {
	ConvertSpeachToText(context.Context, *ConvertSpeachToTextRequest) (*ConvertSpeachToTextRespones, error)
	mustEmbedUnimplementedTranscribationServiceServer()
}

// UnimplementedTranscribationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTranscribationServiceServer struct {
}

func (UnimplementedTranscribationServiceServer) ConvertSpeachToText(context.Context, *ConvertSpeachToTextRequest) (*ConvertSpeachToTextRespones, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConvertSpeachToText not implemented")
}
func (UnimplementedTranscribationServiceServer) mustEmbedUnimplementedTranscribationServiceServer() {}

// UnsafeTranscribationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TranscribationServiceServer will
// result in compilation errors.
type UnsafeTranscribationServiceServer interface {
	mustEmbedUnimplementedTranscribationServiceServer()
}

func RegisterTranscribationServiceServer(s grpc.ServiceRegistrar, srv TranscribationServiceServer) {
	s.RegisterService(&TranscribationService_ServiceDesc, srv)
}

func _TranscribationService_ConvertSpeachToText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConvertSpeachToTextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TranscribationServiceServer).ConvertSpeachToText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pyai.TranscribationService/ConvertSpeachToText",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TranscribationServiceServer).ConvertSpeachToText(ctx, req.(*ConvertSpeachToTextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TranscribationService_ServiceDesc is the grpc.ServiceDesc for TranscribationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TranscribationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pyai.TranscribationService",
	HandlerType: (*TranscribationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ConvertSpeachToText",
			Handler:    _TranscribationService_ConvertSpeachToText_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pyai/pyai.proto",
}

// SummaryServiceClient is the client API for SummaryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SummaryServiceClient interface {
	GetFragmentSummary(ctx context.Context, in *GetFragmentSummaryRequest, opts ...grpc.CallOption) (*SummaryRespones, error)
	GetFileSummary(ctx context.Context, in *GetFileSummaryRequest, opts ...grpc.CallOption) (*SummaryRespones, error)
}

type summaryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSummaryServiceClient(cc grpc.ClientConnInterface) SummaryServiceClient {
	return &summaryServiceClient{cc}
}

func (c *summaryServiceClient) GetFragmentSummary(ctx context.Context, in *GetFragmentSummaryRequest, opts ...grpc.CallOption) (*SummaryRespones, error) {
	out := new(SummaryRespones)
	err := c.cc.Invoke(ctx, "/pyai.SummaryService/GetFragmentSummary", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *summaryServiceClient) GetFileSummary(ctx context.Context, in *GetFileSummaryRequest, opts ...grpc.CallOption) (*SummaryRespones, error) {
	out := new(SummaryRespones)
	err := c.cc.Invoke(ctx, "/pyai.SummaryService/GetFileSummary", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SummaryServiceServer is the server API for SummaryService service.
// All implementations must embed UnimplementedSummaryServiceServer
// for forward compatibility
type SummaryServiceServer interface {
	GetFragmentSummary(context.Context, *GetFragmentSummaryRequest) (*SummaryRespones, error)
	GetFileSummary(context.Context, *GetFileSummaryRequest) (*SummaryRespones, error)
	mustEmbedUnimplementedSummaryServiceServer()
}

// UnimplementedSummaryServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSummaryServiceServer struct {
}

func (UnimplementedSummaryServiceServer) GetFragmentSummary(context.Context, *GetFragmentSummaryRequest) (*SummaryRespones, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFragmentSummary not implemented")
}
func (UnimplementedSummaryServiceServer) GetFileSummary(context.Context, *GetFileSummaryRequest) (*SummaryRespones, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFileSummary not implemented")
}
func (UnimplementedSummaryServiceServer) mustEmbedUnimplementedSummaryServiceServer() {}

// UnsafeSummaryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SummaryServiceServer will
// result in compilation errors.
type UnsafeSummaryServiceServer interface {
	mustEmbedUnimplementedSummaryServiceServer()
}

func RegisterSummaryServiceServer(s grpc.ServiceRegistrar, srv SummaryServiceServer) {
	s.RegisterService(&SummaryService_ServiceDesc, srv)
}

func _SummaryService_GetFragmentSummary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFragmentSummaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SummaryServiceServer).GetFragmentSummary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pyai.SummaryService/GetFragmentSummary",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SummaryServiceServer).GetFragmentSummary(ctx, req.(*GetFragmentSummaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SummaryService_GetFileSummary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFileSummaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SummaryServiceServer).GetFileSummary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pyai.SummaryService/GetFileSummary",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SummaryServiceServer).GetFileSummary(ctx, req.(*GetFileSummaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SummaryService_ServiceDesc is the grpc.ServiceDesc for SummaryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SummaryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pyai.SummaryService",
	HandlerType: (*SummaryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetFragmentSummary",
			Handler:    _SummaryService_GetFragmentSummary_Handler,
		},
		{
			MethodName: "GetFileSummary",
			Handler:    _SummaryService_GetFileSummary_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pyai/pyai.proto",
}
